version: '3.7'

volumes:
  redis_data:
  neo4jdev_data:
  prometheus_data: {}
  grafana_data: {}

services:
  manager_dev:
    build:
      context: .
      target: development
    hostname: manager_dev
    container_name: manager_dev
    depends_on:
      - redis
    environment:
      - WAIT_HOSTS=redis:6379
      - WORKER_SVC_NAME=worker_dev
      - NODE_ENV=development
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GITHUB_API_TOKEN=${GITHUB_API_TOKEN}
      - MAX_SEARCH_DEPTH=1
      - MIN_STAR_COUNT=5
    # command: npm run start:dev
    volumes:
      - .:/usr/src/app/
      # - /usr/src/app/node_modules
    links:
      - redis
    ports:
      - "3000:3000"

  worker_dev:
    build:
      context: .
      target: development
      dockerfile: worker/Dockerfile
    environment:
      - WAIT_HOSTS=neo4jdev:7687,redis:6379
      - NODE_ENV=development
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - NEO4J_URI=bolt://neo4jdev:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - JP2G_JAR=/home/app/jp2g/jp2g.jar
      - WORKER_SVC_NAME=worker_dev
      - MAX_SEARCH_DEPTH=1
    # command: "sh -c 'node /app/build/worker.js'"
    # command: npm run pure:start-dev If broken look here!!!
    volumes:
      - ./worker:/home/app/worker
      - ./libs/models:/home/app/libs/models
    depends_on: 
      - redis
      - neo4jdev
      - manager_dev
    links: 
      - neo4jdev
    ports: 
      - "3000"

  redis:
    container_name: redis
    image: redis:4.0.14-alpine
    expose:
      - "6379"
    entrypoint: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data

  
  neo4jdev:
    container_name: neo4jdev
    image: neo4j:4.0
    ports:
      - "7687:7687"
      - "7474:7474"
      - "7473:7473"
    environment: 
      - NEO4J_AUTH=neo4j/test
    volumes:
      # - $HOME/neo4j/data:/data
      # - $HOME/neo4j/logs:/logs
      - neo4jdev_data:/data


  # bull-board:
  #   image: jondum/bull-board:latest
  #   container_name: bull-board
  #   depends_on: 
  #     - redis
  #     - manager_dev
  #   environment:
  #     - REDIS_HOST=redis://redis
  #     - PORT=3020
  #   ports:
  #     - "3020:3020"

  bull-board:
    image: tombh/bull-board:latest
    container_name: bull-board
    depends_on: 
      - redis
      - manager_dev
    environment:
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PORT=3020
    ports:
      - "3020:3000"

  # cadvisor:
  #   image: google/cadvisor:latest
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - ./:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker:/var/lib/docker:ro
  #   restart: always
  #   deploy:
  #     mode: global

  # node-exporter:
  #   image: prom/node-exporter:latest
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - ./:/rootfs:ro
  #   # command: 
  #   #   - '--path.procfs=/host/proc' 
  #   #   - '--path.sysfs=/host/sys'
  #   #   - --collector.filesystem.ignored-mount-points
  #   #   - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
  #   ports:
  #     - 9100:9100
  #   # networks:
  #   #   - back-tier
  #   restart: always
  #   deploy:
  #     mode: global

  # prometheus:
  #   image: prom/prometheus:v2.1.0
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     # - '--storage.tsdb.path=/prometheus'
  #     # - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     # - '--web.console.templates=/usr/share/prometheus/consoles'
  #   ports:
  #     - 9090:9090
  #   links:
  #     - cadvisor:cadvisor
  #   depends_on:
  #     - worker
  #     - cadvisor
  #   # networks:
  #   #   - back-tier
  #   restart: always

  # grafana:
  #   image: grafana/grafana:latest
  #   # user: "104"
  #   depends_on:
  #     - prometheus
  #   ports:
  #     - 3040:3000
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   #   - ./grafana/provisioning/:/etc/grafana/provisioning/
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=secret
  #   # networks:
  #   #   - back-tier
  #   #   - front-tier
  #   restart: always